{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Richtext.js","y-richtext.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","extend","Y","compareAttributes","b","Array","requestModules","then","YRichtext","_Y$Array$typeDefiniti","os","_model","_content","this","_this","getPrototypeOf","instances","eventHandler","_pullChanges","forEach","editor","update","_quillBlockFormats","_createClass","key","attrs","keys","opAttributes","name","some","attr","q","val","unbindQuill","_get","map","v","join","createNewOp","op","attributes","insert","_this2","newLineCharacter","c","push","ops","hasOwnProperty","_formatAttributesForQuill","pos","content","curPos","selection","ins","split","curSel","endPos","delStart","delEnd","rightSel","undefined","end","from","to","attrName","attrValue","step2i","step2sel","antiAttrs","_v","deletes","_v2","j","del","performStep4","sel","delta","_quill","insLength","_sanitizeOpAttributes","select","retain","afterRetain","additionalContent","getText","insertText","format","formatText","_format","removeFormat","bindQuill","apply","arguments","quill","findIndex","binding","unobserve","yCallback","off","quillCallback","splice","mutualExcluse","token","applyDelta","event","type","valuePointer","values","vals","position","insertSel","index","unshift","typeDefinition","currText","d","updateContents","newSel","selectionStart","selectionEnd","k","myEvents","_i","deleteText","x","setContents","toDelta","on","observe","get","toString","utils","CustomTypeDefinition","class","struct","initType","regeneratorRuntime","mark","YTextInitializer","model","wrap","_context","prev","next","delegateYield","Struct","List","id","abrupt","stop","createType","defineProperties","target","props","descriptor","defineProperty","protoProps","staticProps","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCCA,YCOA,SAASK,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMT,GAAQ,IAAKS,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOV,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BS,EAAPT,EAElO,QAASW,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GDTje,QAASW,GAAQC,GACf,QAASC,GAAmBlC,EAAGmC,GAC7B,MAAOnC,KAAMmC,GAAW,MAALnC,GAAkB,MAALmC,GAAoB,MAALnC,GAAkB,MAALmC,GAAanC,EAAEyB,cAAgBW,OAASpC,EAAE,KAAOmC,EAAE,IAAMnC,EAAE,KAAOmC,EAAE,GASlIF,EAAEI,gBAAgB,UAAUC,KAAK,WAAY,GACrCC,GADqC,SAAAC,GAEzC,QAAAD,GAAaE,EAAIC,EAAQC,GAAU/B,EAAAgC,KAAAL,EAAA,IAAAM,GAAA7B,EAAA4B,MAAAL,EAAAR,WAAAR,OAAAuB,eAAAP,IAAA/B,KAAAoC,KAC3BH,EAAIC,EAAQC,GADe,OAEjCE,GAAKE,aAELF,EAAKG,aAAaC,aAAe,WAC/BJ,EAAKE,UAAUG,QAAQ,SAAUrC,GAC/BA,EAASsC,OAAOC,YAcpBP,EAAKQ,oBACH,aACA,SACA,SACA,OACA,QACA,YACA,cA3B+BR,EAFM,MAAA1B,GAAAoB,EAAAC,GAAAc,EAAAf,IAAAgB,IAAA,wBAAA7B,MAAA,SAiClB8B,GAErB,GAAa,MAATA,GAA+C,IAA9BjC,OAAOkC,KAAKD,GAAO/C,OACtC,MAAO,KAEP,IAAIiD,KACJ,KAAK,GAAIC,KAAQH,GACXZ,KAAKS,mBAAmBO,KAAK,SAAUC,GAAQ,MAAOA,KAASF,IACjED,EAAA,QAA0BC,EAAMH,EAAMG,IAEtCD,EAAaC,GAAQH,EAAMG,EAG/B,OAAOD,MA9C8BH,IAAA,4BAAA7B,MAAA,SAoDd8B,GAEzB,GAAIM,KACJ,KAAK,GAAIH,KAAQH,GAAO,CACtB,GAAIO,GAAMP,EAAMG,EACH,YAATA,EAOEI,IAEFD,EAAEN,EAAMG,GAAM,IAAMH,EAAMG,GAAM,IAGlCG,EAAEH,GAAQI,EAGd,MAAOD,MAxEgCP,IAAA,WAAA7B,MAAA,WA2EvC,IAAK,GAAIxB,GAAI0C,KAAKG,UAAUtC,OAAS,EAAGP,GAAK,EAAGA,IAC9C0C,KAAKoB,YAAYpB,KAAKG,UAAU7C,GAAGiD,OAErCc,GAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,WAAAsB,MAAApC,KAAAoC,SA9EuCW,IAAA,WAAA7B,MAAA,WA2FvC,MAAOkB,MAAKD,SAASuB,IAAI,SAAUC,GACjC,MAAqB,gBAAVA,GAAEJ,IACJI,EAAEJ,IADX,SAGCK,KAAK,OA/F+Bb,IAAA,UAAA7B,MAAA,WAyHvC,QAAS2C,KACP,GAAIb,KAEJ,KAAK,GAAIG,KAAQW,GAAGC,WAClBf,EAAMG,GAAQW,EAAGC,WAAWZ,EAE9BW,IACEE,UACAD,WAAYf,GA3BhB,IAAK,GALIiB,GAAA7B,KAIL8B,GAAmB,EACdxE,EAAI0C,KAAKD,SAASlC,OAAS,EAAGP,GAAK,EAAGA,IAAK,CAClD,GAAIyE,GAAI/B,KAAKD,SAASzC,EACtB,IAAIyE,EAAEZ,IAAItC,cAAgBW,MAAO,CACjB,OAAVuC,EAAEZ,MACJW,GAAmB,EAErB,QAGCA,GACH9B,KAAKgC,KAAK,KAIZ,IAAIC,MACAP,GACFE,UACAD,cAcF,KADArE,EAAI,EACGA,EAAI0C,KAAKD,SAASlC,OAAQP,IAAK,CACpC,GAAIiE,GAAIvB,KAAKD,SAASzC,GAAG6D,GACzB,IAAII,EAAE1C,cAAgBW,MAAO,CAC3B,IAAMkC,EAAGC,WAAWO,eAAeX,EAAE,KAAe,MAARA,EAAE,IAAeG,EAAGC,WAAWJ,EAAE,MAAQA,EAAE,GACrF,QAEEG,GAAGE,OAAO/D,OAAS,IACrB6D,EAAGE,OAASF,EAAGE,OAAOJ,KAAK,IAC3BS,EAAID,KAAKN,GACTD,KAEW,OAATF,EAAE,SACGG,GAAGC,WAAWJ,EAAE,IAEvBG,EAAGC,WAAWJ,EAAE,IAAMA,EAAE,OAEJ,gBAANA,GAChBG,EAAGE,OAAOI,KAAKT,IAEXG,EAAGE,OAAO/D,OAAS,IACrB6D,EAAGE,OAASF,EAAGE,OAAOJ,KAAK,IAC3BS,EAAID,KAAKN,GACTD,KAEFC,EAAGE,OAASL,EACZU,EAAID,KAAKN,GACTD,KAcJ,MAXIC,GAAGE,OAAO/D,OAAS,IACrB6D,EAAGE,OAASF,EAAGE,OAAOJ,KAAK,IAC3BS,EAAID,KAAKN,IAEXO,EAAI3B,QAAQ,SAACoB,GAC+B,IAAtC/C,OAAOkC,KAAKa,EAAGC,YAAY9D,aACtB6D,GAAGC,WAEVD,EAAGC,WAAaE,EAAKM,0BAA0BT,EAAGC,cAG/CM,KA7KgCtB,IAAA,SAAA7B,MAAA,SA+KjCsD,EAAKC,GAGX,IAAK,GAFDC,GAAS,EACTC,KACKjF,EAAI,EAAGA,EAAI0C,KAAKD,SAASlC,QAC5ByE,IAAWF,EADyB9E,IAAK,CAI7C,GAAIiE,GAAIvB,KAAKD,SAASzC,GAAG6D,GACrBI,GAAE1C,cAAgBW,MACpB8C,IAEa,OAATf,EAAE,SACGgB,GAAUhB,EAAE,IAEnBgB,EAAUhB,EAAE,IAAMA,EAAE,GAI1B,GAAIiB,EASJ,OAPEA,GADqB,gBAAZH,GACHA,EAAQI,MAAM,IACXJ,EAAQxD,cAAgBF,QAC1B0D,GAEDA,EAERhB,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa1C,EAAGkF,GACTD,KA1MgC5B,IAAA,SAAA7B,MAAA,SA4MjCsD,EAAKvE,GAeX,GAAIyE,GAAS,EACTI,KACAC,EAASP,EAAMvE,CACnB,MAAc,GAAVA,GAAJ,CACA,GAAI+E,GACAC,EACAtB,EAAGjE,CAEP,KAAKsF,EAAW,EAAYR,EAATE,GAAgBM,EAAW5C,KAAKD,SAASlC,OAAQ+E,IAClErB,EAAIvB,KAAKD,SAAS6C,GAAUzB,IACxBI,EAAE1C,cAAgBW,MACpB8C,IAEAI,EAAOnB,EAAE,IAAMA,EAAE,EAGrB,KAAKsB,EAASD,EAAmBD,EAATL,GAAmBO,EAAS7C,KAAKD,SAASlC,OAAQgF,IACxEtB,EAAIvB,KAAKD,SAAS8C,GAAQ1B,IACtBI,EAAE1C,cAAgBW,OACpB8C,GAGJ,IAAIO,IAAW7C,KAAKD,SAASlC,OAE3BwD,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa4C,EAAUC,EAASD,OAC3B,CACDrB,EAAE1C,cAAgBW,OACpBqD,GAEF,IAAIC,KACJ,KAAKxF,EAAIuF,EAAQvF,GAAKsF,EAAUtF,IAE9B,GADAiE,EAAIvB,KAAKD,SAASzC,GAAG6D,IACjBI,EAAE1C,cAAgBW,MACGuD,SAAnBD,EAASvB,EAAE,KACTjC,EAAkBiC,EAAE,GAAImB,EAAOnB,EAAE,MAEnCF,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa1C,EAAG,GAElBwF,EAASvB,EAAE,IAAMA,EAAE,IAGnBF,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa1C,EAAG,OAEb,CAEL,IADA,GAAI0F,GAAM1F,EAAI,EACPA,EAAIsF,IACTrB,EAAIvB,KAAKD,SAASzC,EAAI,GAAG6D,IACrBI,EAAE1C,cAAgBW,QACpBlC,GAMJ+D,GAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa1C,EAAG0F,EAAM1F,SAjRWqD,IAAA,SAAA7B,MAAA,SA0SjCmE,EAAMC,EAAIC,EAAUC,GAC1B,GAAY,MAARH,GAAsB,MAANC,GAA0B,MAAZC,GAAkCJ,SAAdK,EACpD,KAAM,IAAI5F,OAAM,kCAQhB,KANA,GAAI6F,GACAC,EACAC,GAAaJ,EAAU,MACvBb,EAAS,EACThF,EAAI,EAEDA,EAAI0C,KAAKD,SAASlC,QACnByE,IAAWW,EADgB3F,IAAK,CAIpC,GAAIkG,GAAIxD,KAAKD,SAASzC,GAAG6D,GACrBqC,GAAE3E,cAAgBW,MAEhBgE,EAAE,KAAOL,IACXI,EAAU,GAAKC,EAAE,IAInBlB,IAIChD,EAAkBiE,EAAU,GAAIH,KAEnCC,EAAS/F,EACTgG,GAAYH,EAAUC,GAKxB,KADA,GAAIK,MACGnG,EAAI0C,KAAKD,SAASlC,QACnByE,IAAWY,EADgB5F,IAAK,CAIpC,GAAIoG,GAAI1D,KAAKD,SAASzC,GAAG6D,GACrBuC,GAAE7E,cAAgBW,MAEhBkE,EAAE,KAAOP,IACXI,EAAU,GAAKG,EAAE,GACjBD,EAAQzB,KAAK1E,IAIfgF,IAKJ,IAAK,GAAIqB,GAAIF,EAAQ5F,OAAS,EAAG8F,GAAK,EAAGA,IAAK,CAC5C,GAAIC,GAAMH,EAAQE,EAClBtC,GAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa4D,EAAK,GAERtG,EAANsG,GACFtG,IAEQ+F,EAANO,GACFP,IAOJ,IAAK/D,EAAkBiE,EAAU,GAAIH,IAAc9F,EAAI0C,KAAKD,SAASlC,OAAQ,CAC3E,GACI0D,GADAsC,GAAe,CAEnB,KAAKF,EAAIrG,EAAGqG,EAAI3D,KAAKD,SAASlC,SAC5B0D,EAAIvB,KAAKD,SAAS4D,GAAGxC,IACjBI,EAAE1C,cAAgBW,OAFcmE,IAKpC,GAAIpC,EAAE,KAAO4B,EAAU,CACrBU,GAAe,EACXvE,EAAkBiC,EAAE,GAAI6B,IAC1B/B,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa2D,EAAG,EAElB,OAGJ,GAAIE,EAAc,CAChB,GAAIC,IAAOX,EAAUI,EAAU,GAC/BlC,GAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa1C,GAAIwG,KAGrB,GAAc,MAAVT,EAKF,IAJAhC,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAaqD,GAASC,IAIjBK,EAAIN,EAAS,EAAGM,GAAK,IACxBpC,EAAIvB,KAAKD,SAAS4D,GAAGxC,IACjBI,EAAE1C,cAAgBW,OAFKmE,IAKvBpC,EAAE,KAAO4B,GACX9B,EAAA1B,EAAAjB,UAAAS,WAAAR,OAAAuB,eAAAP,EAAAjB,WAAA,SAAAsB,MAAApC,KAAAoC,KAAa2D,EAAG,MA7YehD,IAAA,aAAA7B,MAAA,SAuZ7BiF,EAAOC,GAGjB,IAAK,GADDjD,GADAqB,EAAM,EAED9E,EAAI,EAAGA,EAAIyG,EAAM9B,IAAIpE,OAAQP,IAAK,CACzC,GAEIsD,GACAqD,EAHAvC,EAAKqC,EAAM9B,IAAI3E,GACfwD,EAAed,KAAKkE,sBAAsBxC,EAAGC,WAGjD,IAAiB,MAAbD,EAAGE,OAAgB,CACI,gBAAdF,GAAGE,QACZhB,EAAQZ,KAAK4B,OAAOQ,EAAKV,EAAGE,QAC5BqC,EAAYvC,EAAGE,OAAO/D,SAEtB+C,EAAQZ,KAAK4B,OAAOQ,EAAKV,EAAGE,QAC5BqC,EAAY,EAGd,KAAKlD,IAAQD,GACNxB,EAAkBwB,EAAaC,GAAOH,EAAMG,KAC/Cf,KAAKmE,OAAO/B,EAAKA,EAAM6B,EAAWlD,EAAMD,EAAaC,GAKzD,KAAKA,IAAQH,IACS,MAAhBE,GAA8C,MAAtBA,EAAaC,KACvCf,KAAKmE,OAAO/B,EAAKA,EAAM6B,EAAWlD,EAAM,KAG5CqB,IAAO6B,EAKT,GAHiB,MAAbvC,EAAAA,WACF1B,KAAAA,UAAYoC,EAAKV,EAAAA,WAEF,MAAbA,EAAG0C,QAA4B,MAAVJ,EAAgB,CACvC,GAAIK,GAAcjC,EAAMV,EAAG0C,MAC3B,IAAIC,EAAcrE,KAAKnC,OAAQ,CAE7B,GAAIyG,GAAoBN,EAAOO,QAAQvE,KAAKnC,OAC5CmG,GAAOQ,WAAWxE,KAAKnC,OAAQyG,EAE/B,KAAKvD,IAAQD,GAAc,CACzB,GAAI2D,KACJA,GAAO1D,IAAQ,EACf0D,EAASzE,KAAKmC,0BAA0BsC,GAExCT,EAAOU,WAAW1E,KAAKnC,OAASyG,EAAkBzG,OAAQyG,EAAkBzG,OAAQ4G,GAGtFzE,KAAK4B,OAAO5B,KAAKnC,OAAQyG,GAG3B,IAAKvD,IAAQD,GAAc,CACzB,GAAIG,GAAOH,EAAaC,EACxBf,MAAKmE,OAAO/B,EAAKiC,EAAatD,EAAME,EACpC,IAAI0D,KAGJ,IAFAA,EAAO5D,GAAgB,MAARE,GAAe,EAAQA,EACtC0D,EAAS3E,KAAKmC,0BAA0BwC,GAC3B,WAAT5D,EAAmB,CACrB,GAAI6D,KACJ5E,MAAKS,mBAAmBH,QAAQ,SAAC/C,GAAQqH,EAAarH,IAAK,IAC3DyG,EAAOU,WAAWtC,EAAKV,EAAG0C,OAAQQ,GAEpCZ,EAAOU,WAAWtC,EAAKV,EAAG0C,OAAQO,GAEpCvC,EAAMiC,OAxd6B1D,IAAA,OAAA7B,MAAA,WA6dvCkB,KAAK6E,UAAUC,MAAM9E,KAAM+E,cA7dYpE,IAAA,iBAAA7B,MAAA,WAgevC,IAAK,GAAIxB,GAAI0C,KAAKG,UAAUtC,OAAS,EAAGP,GAAK,EAAGA,IAC9C0C,KAAKoB,YAAYpB,KAAKG,UAAU7C,GAAGiD,WAjeEI,IAAA,cAAA7B,MAAA,SAoe5BkG,GACX,GAAI1H,GAAI0C,KAAKG,UAAU8E,UAAU,SAAUC,GACzC,MAAOA,GAAQ3E,SAAWyE,GAE5B,IAAI1H,GAAK,EAAG,CACV,GAAI4H,GAAUlF,KAAKG,UAAU7C,EAC7B0C,MAAKmF,UAAUD,EAAQE,WACvBF,EAAQ3E,OAAO8E,IAAI,cAAeH,EAAQI,eAC1CtF,KAAKG,UAAUoF,OAAOjI,EAAG,OA5eYqD,IAAA,YAAA7B,MAAA,SA+e9BkG,GAMT,QAASQ,GAAejI,GACtB,GAAIkI,EAAO,CACTA,GAAQ,CACR,KACElI,IACA,MAAOV,GAEP,KADA4I,IAAQ,EACF,GAAIjI,OAAMX,GAElB4I,GAAQ,GAKZ,QAASH,GAAevB,GACtByB,EAAc,WACZnH,EAAKqH,WAAW3B,EAAOiB,KAM3B,QAASI,GAAWO,GAClBH,EAAc,WACZ,GAAIjE,GACAmB,CACJ,IAAmB,WAAfiD,EAAMC,KAER,IADA,GAAIC,GAAe,EACZA,EAAeF,EAAMG,OAAOjI,QAAQ,CAEzC,IADA,GAAIkI,MACGF,EAAeF,EAAMG,OAAOjI,QAAU8H,EAAMG,OAAOD,GAAchH,cAAgBW,OACtFuG,EAAK/D,KAAK2D,EAAMG,OAAOD,IACvBA,GAEF,IAAIE,EAAKlI,OAAS,EAAG,CAGnB,IAAK,GAFDmI,GAAW,EACXC,KACKvI,EAAI,EAAGA,EAAIiI,EAAMO,MAAOxI,IAC/B6D,EAAIlD,EAAK0B,SAASrC,GAAGyD,IACjBI,EAAE1C,cAAgBW,MACpBwG,IAEAC,EAAU1E,EAAE,IAAMA,EAAE,EAOxB,KADA7D,EAAIiI,EAAMO,MAAQP,EAAM9H,OACjBH,EAAIW,EAAK0B,SAASlC,SACvB0D,EAAIlD,EAAK0B,SAASrC,GAAGyD,IACjBI,EAAE1C,cAAgBW,QACfyG,EAAU/D,eAAeX,EAAE,MAC9B0E,EAAU1E,EAAE,IAAM,MAKtB7D,GAIF,KAAK,GAAIqD,KAAQkF,GACQ,MAAnBA,EAAUlF,KACZkF,EAAUlF,IAAQ,EAGtB,IAAI1C,EAAKR,SAAWmI,EAAWD,EAAKlI,QAAoC,OAA1BkI,EAAKA,EAAKlI,OAAS,GAAa,CAE5E,GAAImF,IAAO,MACPc,IAEJ,KAAK/C,IAAQkF,GACPA,EAAUlF,MAAU,IACtBiC,EAAImD,SAASpF,GAAM,IACnB+C,EAAI/C,IAAQ,EAGhB1B,GAAEG,MAAM4G,eAAR/G,SAA6BX,UAAUkD,OAAOhE,KAAKS,EAAM2H,EAAWD,EAAKlI,OAAQmF,GAEjFgC,EAAMR,WAAWwB,EAAU,KAAM3H,EAAK8D,0BAA0B2B,IAGlE,GAAIC,KACAiC,GAAW,GACbjC,EAAM/B,MAAOoC,OAAQ4B,GAEvB,IAAIK,KACJN,GAAKzF,QAAQ,SAAUiB,GACJ,gBAANA,GACT8E,EAASrE,KAAKT,IAEV8E,EAASxI,OAAS,IACpBkG,EAAM/B,MACJJ,OAAQyE,EAAS7E,KAAK,IACtBG,WAAYsE,IAEdI,MAEFtC,EAAM/B,MACJJ,OAAQL,EACRI,WAAYsE,OAIdI,EAASxI,OAAS,GACpBkG,EAAM/B,MACJJ,OAAQyE,EAAS7E,KAAK,IACtBG,WAAYsE,IAIhBlC,EAAMzD,QAAQ,SAAAgG,GACQ,MAAhBA,EAAE3E,YAAsBhD,OAAOkC,KAAKyF,EAAE3E,YAAY9D,OAAS,EAC7DyI,EAAE3E,WAAatD,EAAK8D,0BAA0BmE,EAAE3E,kBAEzC2E,GAAE3E,aAGbqD,EAAMuB,eAAexC,OAEhB,CAGLrB,EAAS,IAKT,KAAK,GAJD8D,GAASb,EAAMG,OAAOD,KAGtBY,EAAiB,EACZ9C,EAAIgC,EAAMO,MAAQL,EAAe,EAAsDlC,GAAK,EAAGA,IAEtG,GADApC,EAAIlD,EAAK0B,SAAS4D,GAAGxC,IACjBI,EAAE1C,cAAgBW,OAEpB,GAAIgH,EAAO,KAAOjF,EAAE,GAAI,CAGtBmB,EAASnB,EAAE,EACX,YAGFkF,IAIJ,MAAO9C,GAAK,EAAGA,IACbpC,EAAIlD,EAAK0B,SAAS4D,GAAGxC,IACjBI,EAAE1C,cAAgBW,OACpBiH,GAIJ,IAAInH,EAAkBkH,EAAO,GAAI9D,GAE/B,QAIF,KAAK,GADDgE,GAAeD,EACVE,EAAIhB,EAAMO,MAAQL,EAAqEc,EAAItI,EAAK0B,SAASlC,OAAQ8I,IAExH,GADApF,EAAIlD,EAAK0B,SAAS4G,GAAGxF,IACjBI,EAAE1C,cAAgBW,OACpB,GAAI+B,EAAE,KAAOiF,EAAO,GAElB,UAGFE,IAIJ,IAAID,IAAmBC,EAAc,CAEnC,GAAIjC,KAGJ,IAFAA,EAAO+B,EAAO,IAAmB,MAAbA,EAAO,IAAa,EAAQA,EAAO,GACvD/B,EAASpG,EAAK8D,0BAA0BsC,GACtB,WAAd+B,EAAO,GAAiB,CAC1B,GAAI5B,KACJvG,GAAKoC,mBAAmBH,QAAQ,SAAC/C,GAAQqH,EAAarH,IAAK,IAC3DyH,EAAMN,WAAW+B,EAAgBC,EAAeD,EAAgB7B,GAElEI,EAAMN,WAAW+B,EAAgBC,EAAeD,EAAgBhC,SAIjE,IAAmB,WAAfkB,EAAMC,KAAmB,CAGlC,IAAK,GADDgB,MACKtJ,EAAI,EAAGuJ,EAAK,EAAGvJ,EAAIqI,EAAM9H,OAAQP,IACpCqI,EAAMG,OAAOxI,GAAGuB,cAAgBW,QAC9BlC,IAAMuJ,GACRD,EAAS5E,MACP4D,KAAM,OACN/H,OAAQP,EAAIuJ,EACZX,MAAOP,EAAMO,QAGjBW,EAAKvJ,EAAI,EACTsJ,EAAS5E,MACP4D,KAAM,YACNzE,IAAKwE,EAAMG,OAAOxI,GAClB4I,MAAOP,EAAMO,QAIf5I,KAAMuJ,GACRD,EAAS5E,MACP4D,KAAM,OACN/H,OAAQP,EAAIuJ,EACZX,MAAOP,EAAMO,QAIjBU,EAAStG,QAAQ,SAAUqF,GACzB,GAAmB,SAAfA,EAAMC,KAAiB,CAEzB,IAAK,GADDxD,GAAM,EACDjF,EAAI,EAAGA,EAAIwI,EAAMO,MAAO/I,IAC/BoE,EAAIlD,EAAK0B,SAAS5C,GAAGgE,IACjBI,EAAE1C,cAAgBW,OACpB4C,GAGJ4C,GAAM8B,WAAW1E,EAAKuD,EAAM9H,YACvB,CACL6E,EAAS,IACT,IACIqE,GADA9D,EAAO,CAEX,KAAK8D,EAAIpB,EAAMO,MAAQ,EAAGa,GAAK,EAAGA,IAEhC,GADAxF,EAAIlD,EAAK0B,SAASgH,GAAG5F,IACjBI,EAAE1C,cAAgBW,OACpB,GAAI+B,EAAE,KAAOoE,EAAMxE,IAAI,GAAI,CACzBuB,EAASnB,EAAE,EACX,YAGF0B,IAGJ,MAAO8D,GAAK,EAAGA,IACbxF,EAAIlD,EAAK0B,SAASgH,GAAG5F,IACjBI,EAAE1C,cAAgBW,OACpByD,GAGJ,IAAIC,GAAKD,CACT,KAAK8D,EAAIpB,EAAMO,MAAOa,EAAI1I,EAAK0B,SAASlC,OAAQkJ,IAE9C,GADAxF,EAAIlD,EAAK0B,SAASgH,GAAG5F,IACjBI,EAAE1C,cAAgBW,OACpB,GAAI+B,EAAE,KAAOoE,EAAMxE,IAAI,GACrB,UAGF+B,IAGJ,KAAK5D,EAAkBoD,EAAQiD,EAAMxE,IAAI,KAAO8B,IAASC,EAAI,CAE3D,GAAIuB,KAGJ,IAFAA,EAAOkB,EAAMxE,IAAI,IAAgB,MAAVuB,GAAiB,EAAQA,EAChD+B,EAASpG,EAAK8D,0BAA0BsC,GACnB,WAAjBkB,EAAMxE,IAAI,GAAiB,CAC7B,GAAIyD,KACJvG,GAAKoC,mBAAmBH,QAAQ,SAAC/C,GAAQqH,EAAarH,IAAK,IAC3DyH,EAAMN,WAAWzB,EAAMC,EAAKD,EAAM2B,GAEpCI,EAAMN,WAAWzB,EAAMC,EAAKD,EAAMwB,OAK1CO,EAAMxE,WAjRV,GAAInC,GAAO2B,KAIPyF,GAAQ,CAaZT,GAAMgC,YAAYhH,KAAKiH,WAQvBjC,EAAMkC,GAAG,cAAe5B,GA2PxBtF,KAAKmH,QAAQ/B,GACbpF,KAAKG,UAAU6B,MACbzB,OAAQyE,EACRI,UAAWA,EACXE,cAAeA,OAxwBsB3E,IAAA,SAAAyG,IAAA,WAwFvC,MAAOpH,MAAKqH,WAAWxJ,WAxFgB8B,GACnBN,EAAEG,MAAM4G,eAAe,SA2wB/C/G,GAAED,OAAO,WAAY,GAAIC,GAAEiI,MAAMC,sBAC/BxG,KAAM,WACNyG,QAAO7H,EACP8H,OAAQ,OACRC,SAAAC,mBAAAC,KAAU,QAAWC,GAAkBhI,EAAIiI,GAAjC,GAAA/H,EAAA,OAAA4H,oBAAAI,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,IAAA,GAAA,MACJnI,MADIiI,EAAAG,cAEA9I,EAAE+I,OAAOC,KAAK/G,IAAI1D,KAAKoC,KAAM8H,EAAO,SAAUpG,GACpD,GAAIA,EAAGQ,eAAe,aACpB,KAAM,IAAI1E,OAAM,+BAEhBkE,GAAGW,QAAQ/B,QAAQ,SAAUyB,EAAGzE,GAC9ByC,EAASiC,MACPsG,IAAK5G,EAAG4G,GAAG,GAAI5G,EAAG4G,GAAG,GAAKhL,GAC1B6D,IAAKO,EAAGW,QAAQ/E,SAThB,KAAA,EAAA,KAAA,GAAA,MAAA0K,GAAAO,OAAA,SAcD,GAAI5I,GAAUE,EAAIiI,EAAMQ,GAAIvI,GAd3B,KAAA,GAAA,IAAA,MAAA,MAAAiI,GAAAQ,SAAWX,EAAX7H,QAgBVyI,WAAY,SAA2B5I,EAAIiI,GACzC,MAAO,IAAInI,GAAUE,EAAIiI,EAAMQ,aC3yBvC,GAAI5H,GAAe,WAAc,QAASgI,GAAiBC,EAAQC,GAAS,IAAK,GAAItL,GAAI,EAAGA,EAAIsL,EAAM/K,OAAQP,IAAK,CAAE,GAAIuL,GAAaD,EAAMtL,EAAIuL,GAAW9J,WAAa8J,EAAW9J,aAAc,EAAO8J,EAAW5J,cAAe,EAAU,SAAW4J,KAAYA,EAAW7J,UAAW,GAAML,OAAOmK,eAAeH,EAAQE,EAAWlI,IAAKkI,IAAiB,MAAO,UAAU3K,EAAa6K,EAAYC,GAAiJ,MAA9HD,IAAYL,EAAiBxK,EAAYQ,UAAWqK,GAAiBC,GAAaN,EAAiBxK,EAAa8K,GAAqB9K,MAE5hBmD,EAAO,QAAS+F,GAAI6B,EAAQC,EAAUC,GAA2B,OAAXF,IAAiBA,EAASG,SAAS1K,UAAW,IAAI2K,GAAO1K,OAAO2K,yBAAyBL,EAAQC,EAAW,IAAanG,SAATsG,EAAoB,CAAE,GAAIE,GAAS5K,OAAOuB,eAAe+I,EAAS,OAAe,QAAXM,EAA0BxG,OAA2BqE,EAAImC,EAAQL,EAAUC,GAAoB,GAAI,SAAWE,GAAQ,MAAOA,GAAKvK,KAAgB,IAAI0K,GAASH,EAAKjC,GAAK,OAAerE,UAAXyG,EAA+BzG,OAAoByG,EAAO5L,KAAKuL,GD+yB5dpL,GAAOJ,QAAUyB,EACA,mBAANC,IACTD,EAAOC,aCiFE","file":"y-richtext.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  function compareAttributes (a, b) {\n    return a === b || (a == null && b == null) || (a != null && b != null && a.constructor === Array && a[0] === b[0] && a[1] === b[1])\n    /* the same as..\n    if (typeof a === 'string' || a == null) {\n      return a === b || a == null && b == null // consider undefined\n    } else {\n      return a[0] === b[0] && a[1] === b[1]\n    }\n    */\n  }\n  Y.requestModules(['Array']).then(function () {\n    class YRichtext extends Y.Array.typeDefinition['class'] {\n      constructor (os, _model, _content) {\n        super(os, _model, _content)\n        this.instances = []\n        // append this utility function with which eventhandler can pull changes from quill\n        this.eventHandler._pullChanges = () => {\n          this.instances.forEach(function (instance) {\n            instance.editor.update()\n          })\n        }\n        /*\n          According to Quills documentation, these are all block-formats.\n          If someone creates a custom format, it must be added here!\n            Blockquote - blockquote\n            Header - header\n            Indent - indent\n            List - list\n            Text Alignment - align\n            Text Direction - direction\n            Code Block - code-block\n        */\n        this._quillBlockFormats = [\n          'blockquote',\n          'header',\n          'indent',\n          'list',\n          'align',\n          'direction',\n          'code-block'\n        ]\n      }\n\n      _sanitizeOpAttributes (attrs) {\n        // return attrs\n        if (attrs == null || Object.keys(attrs).length === 0) {\n          return null\n        } else {\n          var opAttributes = {}\n          for (var name in attrs) {\n            if (this._quillBlockFormats.some(function (attr) { return attr === name })) {\n              opAttributes['_block'] = [name, attrs[name]]\n            } else {\n              opAttributes[name] = attrs[name]\n            }\n          }\n          return opAttributes\n        }\n      }\n      /*\n        Call this method before applying a format to quill.formatText()!\n      */\n      _formatAttributesForQuill (attrs) {\n        // sreturn attrs\n        var q = {}\n        for (var name in attrs) {\n          var val = attrs[name]\n          if (name === '_block') {\n            /*\n            // remove all existing block formats\n            this._quillBlockFormats.forEach(function (f) {\n              q[f] = false\n            })\n            */\n            if (val) {\n              // add format if val is truthy\n              q[attrs[name][0]] = attrs[name][1]\n            }\n          } else {\n            q[name] = val\n          }\n        }\n        return q\n      }\n      _destroy () {\n        for (var i = this.instances.length - 1; i >= 0; i--) {\n          this.unbindQuill(this.instances[i].editor)\n        }\n        super._destroy()\n      }\n      get length () {\n        /*\n          TODO: I must not use observe to compute the length.\n          But since I inherit from Y.Array, I can't set observe\n          the changes at the right momet (for that I would require direct access to EventHandler).\n          This is the most elegant solution, for now.\n          But at some time you should re-write Y.Richtext more elegantly!!\n        */\n        return this.toString().length\n      }\n      toString () {\n        return this._content.map(function (v) {\n          if (typeof v.val === 'string') {\n            return v.val\n          }\n        }).join('')\n      }\n      toDelta () {\n        // check last character\n        // insert a newline as the last character, if neccessary\n        // (quill will do that automatically otherwise..)\n        var newLineCharacter = false\n        for (var i = this._content.length - 1; i >= 0; i--) {\n          var c = this._content[i]\n          if (c.val.constructor !== Array) {\n            if (c.val === '\\n') {\n              newLineCharacter = true\n            }\n            break\n          }\n        }\n        if (!newLineCharacter) {\n          this.push('\\n')\n        }\n\n        // create the delta\n        var ops = []\n        var op = {\n          insert: [],\n          attributes: {}\n        }\n        function createNewOp () {\n          var attrs = {}\n          // copy attributes\n          for (var name in op.attributes) {\n            attrs[name] = op.attributes[name]\n          }\n          op = {\n            insert: [],\n            attributes: attrs\n          }\n        }\n        i = 0\n        for (; i < this._content.length; i++) {\n          let v = this._content[i].val\n          if (v.constructor === Array) {\n            if ((!op.attributes.hasOwnProperty(v[0]) && v[1] == null) || op.attributes[v[0]] === v[1]) {\n              continue\n            }\n            if (op.insert.length > 0) {\n              op.insert = op.insert.join('')\n              ops.push(op)\n              createNewOp()\n            }\n            if (v[1] === null) {\n              delete op.attributes[v[0]]\n            } else {\n              op.attributes[v[0]] = v[1]\n            }\n          } else if (typeof v === 'string') {\n            op.insert.push(v)\n          } else { // v is embed (Object)\n            if (op.insert.length > 0) {\n              op.insert = op.insert.join('')\n              ops.push(op)\n              createNewOp()\n            }\n            op.insert = v\n            ops.push(op)\n            createNewOp()\n          }\n        }\n        if (op.insert.length > 0) {\n          op.insert = op.insert.join('')\n          ops.push(op)\n        }\n        ops.forEach((op) => {\n          if (Object.keys(op.attributes).length === 0) {\n            delete op.attributes\n          } else {\n            op.attributes = this._formatAttributesForQuill(op.attributes)\n          }\n        })\n        return ops\n      }\n      insert (pos, content) {\n        var curPos = 0\n        var selection = {}\n        for (var i = 0; i < this._content.length; i++) {\n          if (curPos === pos) {\n            break\n          }\n          var v = this._content[i].val\n          if (v.constructor !== Array) {\n            curPos++\n          } else {\n            if (v[1] === null) {\n              delete selection[v[0]]\n            } else {\n              selection[v[0]] = v[1]\n            }\n          }\n        }\n        var ins\n        if (typeof content === 'string') {\n          ins = content.split('')\n        } else if (content.constructor === Object) {\n          ins = [content]\n        } else {\n          ins = content\n        }\n        super.insert(i, ins)\n        return selection\n      }\n      delete (pos, length) {\n        /*\n          let x = to be deleted string\n          let s = some string\n          let * = some selection\n          E.g.\n          sss*s***x*xxxxx***xx*x**ss*s\n               |---delete-range--|\n             delStart         delEnd\n\n          We'll check the following\n          * is it possible to delete some of the selections?\n            1. a dominating selection to the right could be the same as the selection (curSel) to delStart\n            2. a selections could be overwritten by another selection to the right\n        */\n        var curPos = 0\n        var curSel = {}\n        var endPos = pos + length\n        if (length <= 0) return\n        var delStart // relative to _content\n        var delEnd // ..\n        var v, i // helper variable for elements of _content\n\n        for (delStart = 0; curPos < pos && delStart < this._content.length; delStart++) {\n          v = this._content[delStart].val\n          if (v.constructor !== Array) {\n            curPos++\n          } else {\n            curSel[v[0]] = v[1]\n          }\n        }\n        for (delEnd = delStart; curPos < endPos && delEnd < this._content.length; delEnd++) {\n          v = this._content[delEnd].val\n          if (v.constructor !== Array) {\n            curPos++\n          }\n        }\n        if (delEnd === this._content.length) {\n          // yay, you can delete everything without checking\n          super.delete(delStart, delEnd - delStart)\n        } else {\n          if (v.constructor !== Array) {\n            delEnd--\n          }\n          var rightSel = {}\n          for (i = delEnd; i >= delStart; i--) {\n            v = this._content[i].val\n            if (v.constructor === Array) {\n              if (rightSel[v[0]] === undefined) {\n                if (compareAttributes(v[1], curSel[v[0]])) {\n                  // case 1.\n                  super.delete(i, 1)\n                }\n                rightSel[v[0]] = v[1]\n              } else {\n                // case 2.\n                super.delete(i, 1)\n              }\n            } else {\n              var end = i + 1\n              while (i > delStart) {\n                v = this._content[i - 1].val\n                if (v.constructor !== Array) {\n                  i--\n                } else {\n                  break\n                }\n              }\n              // always delete the strings\n              super.delete(i, end - i)\n            }\n          }\n        }\n      }\n      /*\n      1. get selection attributes from position $from\n         (name it antiAttrs, and we'll use it to make sure that selection ends in antiAttrs)\n      2. Insert selection $attr, if necessary\n      3. Between from and to, we'll delete all selections that do not match $attr.\n         Furthermore, we'll update antiAttrs, if necessary\n      4. In the end well insert a selection that makes sure that selection($to) ends in antiAttrs\n\n      Special case (which is quill related): There may only be one format on \\n.\n      If a user inserts a format on a newline character, all existing formats are deleted.\n      Quill denotes to these types of formats as block formats. The following block formats are defined:\n          Blockquote - blockquote\n          Header - header\n          Indent - indent\n          List - list\n          Text Alignment - align\n          Text Direction - direction\n          Code Block - code-block\n\n      */\n      select (from, to, attrName, attrValue) {\n        if (from == null || to == null || attrName == null || attrValue === undefined) {\n          throw new Error('You must define four parameters')\n        } else {\n          var step2i\n          var step2sel\n          var antiAttrs = [attrName, null]\n          var curPos = 0\n          var i = 0\n          // 1. compute antiAttrs\n          for (; i < this._content.length; i++) {\n            if (curPos === from) {\n              break\n            }\n            let v = this._content[i].val\n            if (v.constructor === Array) {\n              // selection\n              if (v[0] === attrName) { // compare names\n                antiAttrs[1] = v[1]\n              }\n            } else {\n              // embed or text\n              curPos++\n            }\n          }\n          // 2. Insert attr\n          if (!compareAttributes(antiAttrs[1], attrValue)) {\n            // we'll execute this later\n            step2i = i\n            step2sel = [attrName, attrValue]\n          }\n\n          // 3. update antiAttrs, modify selection\n          var deletes = []\n          for (; i < this._content.length; i++) {\n            if (curPos === to) {\n              break\n            }\n            let v = this._content[i].val\n            if (v.constructor === Array) {\n              // selection\n              if (v[0] === attrName) { // compare names\n                antiAttrs[1] = v[1]\n                deletes.push(i)\n              }\n            } else {\n              // embed or text\n              curPos++\n            }\n          }\n          // actually delete the found selections\n          // also.. we have to delete from right to left (so that the positions dont change)\n          for (var j = deletes.length - 1; j >= 0; j--) {\n            var del = deletes[j]\n            super.delete(del, 1)\n            // update i, rel. to\n            if (del < i) {\n              i--\n            }\n            if (del < step2i) {\n              step2i--\n            }\n          }\n          // 4. Update selection to match antiAttrs\n          // never insert, if not necessary\n          //  1. when it is the last position ~ i < _content.length)\n          //  2. when a similar attrName already exists between i and the next character\n          if (!compareAttributes(antiAttrs[1], attrValue) && i < this._content.length) { // check 1.\n            var performStep4 = true\n            var v\n            for (j = i; j < this._content.length; j++) {\n              v = this._content[j].val\n              if (v.constructor !== Array) {\n                break\n              }\n              if (v[0] === attrName) { // compare names\n                performStep4 = false // check 2.\n                if (compareAttributes(v[1], attrValue)) {\n                  super.delete(j, 1)\n                }\n                break\n              }\n            }\n            if (performStep4) {\n              var sel = [attrName, antiAttrs[1]]\n              super.insert(i, [sel])\n            }\n          }\n          if (step2i != null) {\n            super.insert(step2i, [step2sel])\n            // if there are some selections to the left of step2sel, delete them if possible\n            // * have same attribute name\n            // * no insert between step2sel and selection\n            for (j = step2i - 1; j >= 0; j--) {\n              v = this._content[j].val\n              if (v.constructor !== Array) {\n                break\n              }\n              if (v[0] === attrName) {\n                super.delete(j, 1)\n              }\n            }\n          }\n        }\n      }\n      /*\n        This method accepts a quill delta (http://quilljs.com/docs/deltas/)\n        The second parameter (_quill) is optional (it is only necessary when binding a quill instance)\n      */\n      applyDelta (delta, _quill) {\n        var pos = 0\n        var name // helper variable\n        for (var i = 0; i < delta.ops.length; i++) {\n          var op = delta.ops[i]\n          var opAttributes = this._sanitizeOpAttributes(op.attributes)\n          var attrs\n          var insLength\n          if (op.insert != null) {\n            if (typeof op.insert === 'string') {\n              attrs = this.insert(pos, op.insert)\n              insLength = op.insert.length\n            } else { // typeof is Object\n              attrs = this.insert(pos, op.insert)\n              insLength = 1\n            }\n            // create new selection\n            for (name in opAttributes) {\n              if (!compareAttributes(opAttributes[name], attrs[name])) {\n                this.select(pos, pos + insLength, name, opAttributes[name])\n              }\n            }\n            // not-existence of an attribute in opAttributes denotes\n            // that we have to unselect (set to null)\n            for (name in attrs) {\n              if (opAttributes == null || opAttributes[name] == null) {\n                this.select(pos, pos + insLength, name, null)\n              }\n            }\n            pos += insLength\n          }\n          if (op.delete != null) {\n            this.delete(pos, op.delete)\n          }\n          if (op.retain != null && _quill != null) {\n            var afterRetain = pos + op.retain\n            if (afterRetain > this.length) {\n              // debugger // TODO: check why this is still called..\n              let additionalContent = _quill.getText(this.length)\n              _quill.insertText(this.length, additionalContent)\n              // quill.deleteText(this.length + additionalContent.length, quill.getLength()) the api changed!\n              for (name in opAttributes) {\n                let format = {}\n                format[name] = false\n                format = this._formatAttributesForQuill(format)\n                // TODO: format expects falsy values now in order to remove formats\n                _quill.formatText(this.length + additionalContent.length, additionalContent.length, format)\n                // quill.deleteText(this.length, this.length + op.retain) the api changed!\n              }\n              this.insert(this.length, additionalContent)\n              // opAttributes = null\n            }\n            for (name in opAttributes) {\n              var attr = opAttributes[name]\n              this.select(pos, afterRetain, name, attr)\n              let format = {}\n              format[name] = attr == null ? false : attr\n              format = this._formatAttributesForQuill(format)\n              if (name === '_block') {\n                var removeFormat = {}\n                this._quillBlockFormats.forEach((f) => { removeFormat[f] = false })\n                _quill.formatText(pos, op.retain, removeFormat)\n              }\n              _quill.formatText(pos, op.retain, format)\n            }\n            pos = afterRetain\n          }\n        }\n      }\n      bind () {\n        this.bindQuill.apply(this, arguments)\n      }\n      unbindQuillAll () {\n        for (var i = this.instances.length - 1; i >= 0; i--) {\n          this.unbindQuill(this.instances[i].editor)\n        }\n      }\n      unbindQuill (quill) {\n        var i = this.instances.findIndex(function (binding) {\n          return binding.editor === quill\n        })\n        if (i >= 0) {\n          var binding = this.instances[i]\n          this.unobserve(binding.yCallback)\n          binding.editor.off('text-change', binding.quillCallback)\n          this.instances.splice(i, 1)\n        }\n      }\n      bindQuill (quill) {\n        var self = this\n\n        // this function makes sure that either the\n        // quill event is executed, or the yjs observer is executed\n        var token = true\n        function mutualExcluse (f) {\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              token = true\n              throw new Error(e)\n            }\n            token = true\n          }\n        }\n        quill.setContents(this.toDelta())\n\n        function quillCallback (delta) {\n          mutualExcluse(function () {\n            self.applyDelta(delta, quill)\n          })\n        }\n        // TODO: Investigate if 'editor-change' is more appropriate!\n        quill.on('text-change', quillCallback)\n\n        function yCallback (event) {\n          mutualExcluse(function () {\n            var v // helper variable\n            var curSel // helper variable (current selection)\n            if (event.type === 'insert') {\n              var valuePointer = 0\n              while (valuePointer < event.values.length) {\n                var vals = []\n                while (valuePointer < event.values.length && event.values[valuePointer].constructor !== Array) {\n                  vals.push(event.values[valuePointer])\n                  valuePointer++\n                }\n                if (vals.length > 0) { // insert new content (text and embed)\n                  var position = 0\n                  var insertSel = {}\n                  for (var l = 0; l < event.index; l++) {\n                    v = self._content[l].val\n                    if (v.constructor !== Array) {\n                      position++\n                    } else {\n                      insertSel[v[0]] = v[1]\n                    }\n                  }\n                  // consider the case (this is markup): \"hi *you*\" & insert \"d\" at position 3\n                  // Quill may implicitely make \"d\" bold (dunno if thats true). Yjs, however, expects d not to be bold.\n                  // So we check future attributes and explicitely set them, if neccessary\n                  l = event.index + event.length\n                  while (l < self._content.length) {\n                    v = self._content[l].val\n                    if (v.constructor === Array) {\n                      if (!insertSel.hasOwnProperty(v[0])) {\n                        insertSel[v[0]] = null\n                      }\n                    } else {\n                      break\n                    }\n                    l++\n                  }\n                  // TODO: you definitely should exchange null with the new \"false\" approach..\n                  // Then remove the following! :\n                  for (var name in insertSel) {\n                    if (insertSel[name] == null) {\n                      insertSel[name] = false\n                    }\n                  }\n                  if (self.length === position + vals.length && vals[vals.length - 1] !== '\\n') {\n                    // always make sure that the last character is enter!\n                    var end = ['\\n']\n                    var sel = {}\n                    // now we remove all selections\n                    for (name in insertSel) {\n                      if (insertSel[name] !== false) {\n                        end.unshift([name, false])\n                        sel[name] = false\n                      }\n                    }\n                    Y.Array.typeDefinition.class.prototype.insert.call(self, position + vals.length, end)\n                    // format attributes before pushing to quill!\n                    quill.insertText(position, '\\n', self._formatAttributesForQuill(sel))\n                  }\n                  // create delta from vals\n                  var delta = []\n                  if (position > 0) {\n                    delta.push({ retain: position })\n                  }\n                  var currText = []\n                  vals.forEach(function (v) {\n                    if (typeof v === 'string') {\n                      currText.push(v)\n                    } else {\n                      if (currText.length > 0) {\n                        delta.push({\n                          insert: currText.join(''),\n                          attributes: insertSel\n                        })\n                        currText = []\n                      }\n                      delta.push({\n                        insert: v,\n                        attributes: insertSel\n                      })\n                    }\n                  })\n                  if (currText.length > 0) {\n                    delta.push({\n                      insert: currText.join(''),\n                      attributes: insertSel\n                    })\n                  }\n                  // format attributes before pushing to quill!\n                  delta.forEach(d => {\n                    if (d.attributes != null && Object.keys(d.attributes).length > 0) {\n                      d.attributes = self._formatAttributesForQuill(d.attributes)\n                    } else {\n                      delete d.attributes\n                    }\n                  })\n                  quill.updateContents(delta)\n                  // quill.insertText(position, vals.join(''), insertSel)\n                } else { // Array (selection)\n                  // a new selection is created\n                  // find left selection that matches newSel[0]\n                  curSel = null\n                  var newSel = event.values[valuePointer++] // get selection, increment counter\n                  // denotes the start position of the selection\n                  // (without the selection objects)\n                  var selectionStart = 0\n                  for (var j = event.index + valuePointer - 2/* -1 for index, -1 for incremented valuePointer */; j >= 0; j--) {\n                    v = self._content[j].val\n                    if (v.constructor === Array) {\n                      // check if v matches newSel\n                      if (newSel[0] === v[0]) { // compare names\n                        // found a selection\n                        // update curSel and go to next step\n                        curSel = v[1]\n                        break\n                      }\n                    } else {\n                      selectionStart++\n                    }\n                  }\n                  // make sure to decrement j, so we correctly compute selectionStart\n                  for (; j >= 0; j--) {\n                    v = self._content[j].val\n                    if (v.constructor !== Array) {\n                      selectionStart++\n                    }\n                  }\n                  // either a selection was found {then curSel was updated}, or not (then curSel = null)\n                  if (compareAttributes(newSel[1], curSel)) {\n                    // both are the same. not necessary to do anything\n                    continue\n                  }\n                  // now find out the range over which newSel has to be created\n                  var selectionEnd = selectionStart\n                  for (var k = event.index + valuePointer/* -1 for incremented valuePointer, +1 for algorithm */; k < self._content.length; k++) {\n                    v = self._content[k].val\n                    if (v.constructor === Array) {\n                      if (v[0] === newSel[0]) { // compare names\n                        // found another selection with same attr name\n                        break\n                      }\n                    } else {\n                      selectionEnd++\n                    }\n                  }\n                  // create a selection from selectionStart to selectionEnd\n                  if (selectionStart !== selectionEnd) {\n                    // format attributes before pushing to quill!!\n                    var format = {}\n                    format[newSel[0]] = newSel[1] == null ? false : newSel[1]\n                    format = self._formatAttributesForQuill(format)\n                    if (newSel[0] === '_block') {\n                      var removeFormat = {}\n                      self._quillBlockFormats.forEach((f) => { removeFormat[f] = false })\n                      quill.formatText(selectionStart, selectionEnd - selectionStart, removeFormat)\n                    }\n                    quill.formatText(selectionStart, selectionEnd - selectionStart, format)\n                  }\n                }\n              }\n            } else if (event.type === 'delete') {\n              // sanitize events\n              var myEvents = []\n              for (var i = 0, _i = 0; i < event.length; i++) {\n                if (event.values[i].constructor === Array) {\n                  if (i !== _i) {\n                    myEvents.push({\n                      type: 'text',\n                      length: i - _i,\n                      index: event.index\n                    })\n                  }\n                  _i = i + 1\n                  myEvents.push({\n                    type: 'selection',\n                    val: event.values[i],\n                    index: event.index\n                  })\n                }\n              }\n              if (i !== _i) {\n                myEvents.push({\n                  type: 'text',\n                  length: i - _i,\n                  index: event.index\n                })\n              }\n              // ending sanitizing.. start brainfuck\n              myEvents.forEach(function (event) {\n                if (event.type === 'text') {\n                  var pos = 0\n                  for (var u = 0; u < event.index; u++) {\n                    v = self._content[u].val\n                    if (v.constructor !== Array) {\n                      pos++\n                    }\n                  }\n                  quill.deleteText(pos, event.length)\n                } else {\n                  curSel = null\n                  var from = 0\n                  var x\n                  for (x = event.index - 1; x >= 0; x--) {\n                    v = self._content[x].val\n                    if (v.constructor === Array) {\n                      if (v[0] === event.val[0]) { // compare names\n                        curSel = v[1]\n                        break\n                      }\n                    } else {\n                      from++\n                    }\n                  }\n                  for (; x >= 0; x--) {\n                    v = self._content[x].val\n                    if (v.constructor !== Array) {\n                      from++\n                    }\n                  }\n                  var to = from\n                  for (x = event.index; x < self._content.length; x++) {\n                    v = self._content[x].val\n                    if (v.constructor === Array) {\n                      if (v[0] === event.val[0]) { // compare names\n                        break\n                      }\n                    } else {\n                      to++\n                    }\n                  }\n                  if (!compareAttributes(curSel, event.val[1]) && from !== to) {\n                    // format attributes before pushing to quill!!\n                    var format = {}\n                    format[event.val[0]] = curSel == null ? false : curSel\n                    format = self._formatAttributesForQuill(format)\n                    if (event.val[0] === '_block') {\n                      var removeFormat = {}\n                      self._quillBlockFormats.forEach((f) => { removeFormat[f] = false })\n                      quill.formatText(from, to - from, removeFormat)\n                    }\n                    quill.formatText(from, to - from, format)\n                  }\n                }\n              })\n            }\n            quill.update()\n          })\n        }\n        this.observe(yCallback)\n        this.instances.push({\n          editor: quill,\n          yCallback: yCallback,\n          quillCallback: quillCallback\n        })\n      }\n    }\n    Y.extend('Richtext', new Y.utils.CustomTypeDefinition({\n      name: 'Richtext',\n      class: YRichtext,\n      struct: 'List',\n      initType: function * YTextInitializer (os, model) {\n        var _content = []\n        yield * Y.Struct.List.map.call(this, model, function (op) {\n          if (op.hasOwnProperty('opContent')) {\n            throw new Error('Text must not contain types!')\n          } else {\n            op.content.forEach(function (c, i) {\n              _content.push({\n                id: [op.id[0], op.id[1] + i],\n                val: op.content[i]\n              })\n            })\n          }\n        })\n        return new YRichtext(os, model.id, _content)\n      },\n      createType: function YRichtextCreator (os, model) {\n        return new YRichtext(os, model.id, [])\n      }\n    }))\n  })\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n",null],"sourceRoot":"/source/"}